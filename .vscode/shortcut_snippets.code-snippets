{
	// Place your requirements_analysis workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }




  "sig_group_dec": {
    "prefix": "#sig_group",
    "description": "Declaration of sig_group",
    "body": "#sig_group ${1:ID}(\"${2:alias}\")"    
  },

  "ext_ref_dec": {
    "prefix": "#ext_ref",
    "description": "Declaration of ext_ref",
    "body": "#ext_ref ${1:ID}(\"${2:alias}\")"    
  },

  "symbolic_dec": {
    "prefix": "#symbolic",
    "description": "Declaration of symbolic",
    "body": "#symbolic ${1:ID}(\"${2:alias}\")"    
  },

  "property_dec": {
    "prefix": "#property",
    "description": "Declaration of property",
    "body": "#property ${1:ID}(\"${2:alias}\")"    
  },

  "block_dec": {
    "prefix": "#block",
    "description": "Declaration of block",
    "body": "#block ${1:ID}(\"${2:alias}\")"    
  },

  "bb_block_dec": {
    "prefix": "#bb_block",
    "description": "Declaration of bb_block",
    "body": "#bb_block ${1:ID}(\"${2:alias}\")"    
  },

  "alias": {
    "prefix": "#alias",
    "description": "Declaration of aliac",
    "body": "#aliac ${1:ID}(\"${2:alias}\")"    
  },

  "using": {
    "prefix": "#using",
    "description": "Declaration of definition file used",
    "body": "#using \"${1:ID}\""    
  },




  "@requirement_func" : {
    "prefix": "@req_f",
    "description": "Add functional type requirement.",
    "body": [
      "@requirement(${1:req_ID},\"${2:alias}\")",
      "{",
      "  @type = FUNCTIONAL;",
      "  @derived_from = TODO; //optional",
      "  @test_id = TODO;",
      "  @variant = TODO;    //optional",
      "  @comment = \"${3:comment}\";     //optional",
      "",
      "  @condition",
      "  {",
      "    ${4:condition};",
      "  }",
      "  @cond_true",
      "  {",
      "    ${5:action_t};",
      "  }",
      "  @cond_false     //optional",
      "  {",
      "    ${6:action_f};",
      "  }",
      "}"
      ]
    },

  "@requirement_nfunc" : {
    "prefix": "@req_n",
    "description": "Add non-functional type requirement.",
    "body": [
      "@requirement(${1:req_ID},\"${2:alias}\")",
      "{",
      "  @type = NON_FUNCTIONAL;",
      "  @derived_from = TODO; //optional",
      "  @test_id = TODO;",
      "  @variant = TODO;    //optional",
      "  @comment = \"${3:comment}\";     //optional",
      "",
      "  @condition",
      "  {",
      "    condition0;",
      "  }",
      "",
      "  @property",
      "  {",
      "    ${4:property};",
      "  }",
      "}"
      ]
    },
    
  "block" : {
    "prefix" : "@block",
    "description": "Add block definition",
    "body": [
      "@block(${1:block_ID})",
      "{",
      "  $2",
      "}"
    ]
  },

  "category" : {
    "prefix": "@category",
    "description": "Add block definition category",
    "body": [
    "@category(${1:cat_id}, \"${2:cat_alias}\")",
    "{",
    "  $3",
    "}"
    ]
  },


  "sig_group" :{
    "prefix": "@sig_group",
    "description": "Group of signals to be defined",
    "body": [
    "@sig_group ${1:sig_group_id}",
    "{",
    "  $3",
    "}",
    ]
  },

  "signal" :{
    "prefix": "@signal",
    "description": "Definition of a signal",
    "body": [
      "@signal(${1:signal_id}, \"${2:alias}\")",
      "{",
      "  @source = TODO;",
      "  @type = NOT_APPLICABLE", 
      "  @range = ${3:range};",
      "  @vals",
      "  {",
      "    Val1(\"${4:val_alias}\");",
      "  }",
      "}"
    ]
  },

  "symbolic":{
    "prefix" : "@symbolic",
    "description": "Defines symbolic variable",
    "body": [
      "@symbolic ${1:ID}",
      "{",
      "  @type = ${2:type};",
      "  @desc = ${3:description};",
      "}"
    ]
  },

  "property":{
    "prefix" : "@property",
    "description": "Defines property constant",
    "body": [
      "@symbolic ${1:ID}",
      "{",
      "  @type = ${2:type};",
      "  @desc = ${3:description};",
      "}"
    ]
  },


  "unit" : {
    "prefix": "@unit",
    "description": "Defines a unit.",
    "body": [
      "@unit ${1:unit_id}(\"${2:alias}\")",
      "{",
      "  @type = ${3:type};",
      "  @range = ${4:range};", 
      "  @vals",
      "  {",
      "    ",
      "  }",
      "}",
    ]
  },

  "bb_block" :{
    "prefix": "@bb_block",
    "description": "Black-box type block",
    "body": [
      "@bb_block(${1:ID})",
      "{",
      "  @desc = \"${2:description};\"",  
      "  @sig_in",
      "  {",
      "    InputSig1;",
      "  }",
      "  @sig_out",
      "  {",
      "    OutpuitSig1;",
      "  }",
      "  @sig_inout",
      "  {",
      "    InputSig1;",
      "  }",
      "}"
    ]
  },
  

  

}